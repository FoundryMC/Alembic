plugins {
    id 'java'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.spongepowered.mixin' version '0.7.+'
}

group = 'foundry'
version = '1.0'

configurations {
    shade
    implementation.extendsFrom(shade)
    library
}

java {
    archivesBaseName = 'alembic'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'alembic'

            mods {
                alembic {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'alembic'

            mods {
                alembic {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'alembic'

            mods {
                alembic {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'alembic', '--all', '--output', file('src/test/generated/resources/'), '--existing', file('src/main/resources/')

//            args '--mod', 'testmod'

            mods {
                alembic {
                    source sourceSets.main
                }
//                testmod {
//                    source sourceSets.test
//                }
            }
        }

//        testData {
//            parent runs.data
//            workingDirectory project.file('run')
//            ideaModule "${project.name}.test"
//
//            environment 'MOD_CLASSES', 'dummy'
//
//            main "cpw.mods.bootstraplauncher.BootstrapLauncher"
//
//            args '--mod', 'testmod'
//
//
//            mods {
//                alembic {
//                    source sourceSets.main
//                }
//                testmod {
//                    source sourceSets.test
//                }
//            }
//        }
    }
}

mixin {
    add sourceSets.main, "alembic.refmap.json"

    config "alembic.mixins.json"
}

sourceSets {
    main.resources {
        srcDir 'src/generated/resources'
    }
    test {
        java.srcDir("src/test/java")
        resources {
            srcDir("src/test/resources")
            srcDir("src/test/generated/resources")
        }
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
        maven { url 'https://jitpack.io' }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.4'

    implementation(fg.deobf("curse.maven:tslateffectslib-700382:4127206"))
    jarJar("curse.maven:tslateffectslib-700382:4127206") {
        jarJar.ranged(it, "[1.3,)")
    }
    implementation(fg.deobf("curse.maven:tslatentitystatus-830420:4420972"))
    shade("com.github.LlamaLad7:MixinExtras:0.1.1")
    library("com.github.LlamaLad7:MixinExtras:0.1.1")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
    minecraftLibrary("com.github.LlamaLad7:MixinExtras:0.1.1")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "alembic",
                "Specification-Vendor"    : "amo, Farcr",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "amo, Farcr",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jarJar.enable()

reobf { jarJar{} }

tasks.assemble {
    dependsOn(tasks.jarJar)
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

reobf {
    shadowJar{}
}

shadowJar{
    configurations = [project.configurations.shade]

    classifier ''
    relocate 'com.llamalad7' , 'alembic.repack.com.llamalad7'

    finalizedBy 'reobfShadowJar'
}