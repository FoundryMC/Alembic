plugins {
    id 'java'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'maven-publish'
}

apply plugin: 'maven-publish'

configurations {
    library
}

group = 'foundry'
version = '1.0.5'
if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}
java {
    archivesBaseName = 'alembic'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')


            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'alembic'

            mods {
                alembic {
                    source sourceSets.main
                }
            }
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'alembic'

            mods {
                alembic {
                    source sourceSets.main
                }
            }
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'alembic'

            args "--mixin.config", "alembic.tests.mixins.json"

            mods {
                alembic {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'alembic', '--all', '--output', file('src/test/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                alembic {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "alembic.refmap.json"
    config "alembic.mixins.json"

    debug.verbose = true
    debug.export = true
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://jitpack.io' }
    maven {
        name = "TslatEntityStatus (TES) Maven Repo"
        url = "https://dl.cloudsmith.io/public/tslat/tes/maven/"
    }
    maven {
        name = "TslatEntityStatus (TEL) Maven Repo"
        url = "https://dl.cloudsmith.io/public/tslat/tel/maven/"
    }
    maven {
        name = "DefaultResources Maven Repo"
        url = "https://maven.lukebemish.dev/releases"
    }
    maven {
        url = "https://maven.shadowsoffire.dev/releases"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.3'

    jarJar(implementation(fg.deobf("dev.lukebemish.defaultresources:defaultresources-forge-${project.minecraft_version}:${project.defaultresources_version}"))) {
        jarJar.ranged(it, "[${project.defaultresources_version},)")
    }

    implementation(fg.deobf("net.tslat.effectslib:TslatEffectsLib-forge-1.20:${project.tel_version}"))
    jarJar("net.tslat.effectslib:TslatEffectsLib-forge-1.20:${project.tel_version}") {
        jarJar.ranged(it, "[1.5,)")
    }

    implementation(fg.deobf("net.tslat.tes:TES-forge-${project.minecraft_version}.1:${project.tes_version}"))

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:0.2.0-beta.5"))
    implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:0.2.0-beta.5")) {
        jarJar.ranged(it, "[0.2.0-beta.5,)")
    }

    implementation(fg.deobf( "dev.shadowsoffire:ApothicAttributes:1.20.1-1.2.1"))
    implementation(fg.deobf("dev.shadowsoffire:Placebo:1.20.1-8.6.0"))
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    finalizedBy('reobfJar')
    classifier 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "alembic",
                "Specification-Vendor"    : "FoundryMC",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "amo, Farcr",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(Copy) {
    filesMatching("META-INF/mods.toml") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

jarJar.enable()

reobf {
    jarJar{}
}

tasks.assemble {
    dependsOn(tasks.jarJar)
}

tasks.jarJar.configure {
    classifier ''
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}