plugins {
    id 'java'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.spongepowered.mixin' version '0.7.+'
}

group = 'foundry'
version = '1.0'
java {
    archivesBaseName = 'testmod'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory "$rootDir/run"
            ideaModule "${rootProject.name}.${project.name}.main"
        }
        client {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'testmod'

            mods {
                alembic {
                    source rootProject.sourceSets.main
                }
                testmod {
                    source sourceSets.main
                }
            }
//            property 'mixin.env.remapRefMap', 'true'
//            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'testmod'

            mods {
                testmod {
                    source sourceSets.main
                }
            }
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        gameTestServer {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'testmod'

            mods {
                testmod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'testmod', '--all', '--output', file('src/test/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                testmod {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    debug = true
    debug.verbose = true
    debug.export = true
}

sourceSets {
    main.resources {
        srcDir 'src/generated/resources'
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://jitpack.io' }
    maven {
        name = "TslatEntityStatus (TES) Maven Repo"
        url = "https://dl.cloudsmith.io/public/tslat/tes/maven/"
    }
    maven {
        name = "TslatEntityStatus (TEL) Maven Repo"
        url = "https://dl.cloudsmith.io/public/tslat/tel/maven/"
    }
    // testing
    maven {
        name = "Iron's Maven"
        url = "https://code.redspace.io/releases"
    }

    maven { url = "https://maven.enginehub.org/repo/" }
    maven { url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    maven { url = "https://maven.theillusivec4.top" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.kosmx.dev/" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.4'

    implementation(rootProject) {
        transitive = true
    }

    jarJar(implementation(fg.deobf("ignored:defaultresources-forge:1.19.2-0.3.0"))) {
        jarJar.ranged(it, "[0.3.0,)")
    }

    implementation(fg.deobf("net.tslat.effectslib:TslatEffectsLib-forge-1.19.3:${project.tel_version}"))
    jarJar("net.tslat.effectslib:TslatEffectsLib-forge-1.19.3:${project.tel_version}") {
        jarJar.ranged(it, "[1.5,)")
    }
    implementation(fg.deobf("net.tslat.tes:TES-forge-${project.minecraft_version}:${project.tes_version}"))
    implementation(fg.deobf("curse.maven:attributetooltipfix-658833:3932463"))
    jarJar("curse.maven:attributetooltipfix-658833:3932463") {
        jarJar.ranged(it, "[1.0.0,)")
    }
    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:0.2.0-beta.5"))
    implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:0.2.0-beta.5")) {
        jarJar.ranged(it, "[0.2.0-beta.5,)")
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }
    // testing
    // IRONS SPELLS N SPELLBOOKS **********************************************************************************
    implementation fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${minecraft_version}-${irons_spells_version}")

    // GECKOLIB ***************************************************************************************************
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")

    // CAELUS *****************************************************************************************************
    compileOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${minecraft_version}-${caelus_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${minecraft_version}-${caelus_version}")

    // PLAYER ANIMATOR ********************************************************************************************
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}")

    // TETRA ******************************************************************************************************
    implementation fg.deobf("se.mickelus.mutil:mutil:${minecraft_version}-${mutil_version}")
    implementation fg.deobf("curse.maven:tetra-${tetra_version}")
    // If you want to run without tetra in dev comment the above 2 lines and uncomment the following line
    // compileOnly fg.deobf("curse.maven:tetra-${tetra_version}")

    // JEI ********************************************************************************************************
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // CURIOS *****************************************************************************************************
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    // JSON *******************************************************************************************************
    implementation "com.google.code.gson:gson:${gson_version}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "alembic",
                "Specification-Vendor"    : "FoundryMC",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "amo, Farcr",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jarJar.enable()

reobf {
    jarJar{}
}

tasks.assemble {
    dependsOn(tasks.jarJar)
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}